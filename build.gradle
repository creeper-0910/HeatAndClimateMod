plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = "${mc_version}-${mod_version}"
group = 'com.defeatedcrow.dcs_climate'
archivesBaseName = "${mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, "dcs.refmap.json"
       config 'mixins.dcs_climate.json'

      debug.verbose = true
      debug.export = true
      //quiet
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: 'official', version: '1.19'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'dcs_climate'
            mods {
               dcs_climate {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'dcs_climate'
            mods {
                dcs_climate {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'dcs_climate'
            mods {
                dcs_climate {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'dcs_climate', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                dcs_climate {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
      name = "Progwml6 maven"
      url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
      name = "ModMaven"
      url = "https://modmaven.dev"
    }
    maven { url "https://www.cursemaven.com" }
    maven { url "https://maven.bai.lol" }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
    compileOnly fg.deobf("mcp.mobius.waila:wthit-api:forge-${wthit_version}")
    runtimeOnly fg.deobf("mcp.mobius.waila:wthit:forge-${wthit_version}")
    runtimeOnly fg.deobf("lol.bai:badpackets:forge-0.2.0")

}

jar {
    manifest {
        exclude '**/Thumbs.db'
        attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "defeatedcrow",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${mc_version}_${mod_version}",
                "Implementation-Vendor"   : "defeatedcrow",
        ])
    }
}


jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}


